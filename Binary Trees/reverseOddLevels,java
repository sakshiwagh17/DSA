class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if (root == null) {
            return null;
        }
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        int level = 0;
        while (!queue.isEmpty()) {
            List<TreeNode> currentLevel = new ArrayList();
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode);
                if (currentNode.left != null) {
                    queue.add(currentNode.left);
                }
                if (currentNode.right != null) {
                    queue.add(currentNode.right);
                }

            }
            if (level % 2 == 1) {
                int i = 0;
                int j = currentLevel.size() - 1;
                while (i < j) {
                    int temp = currentLevel.get(i).val;
                    currentLevel.get(i).val = currentLevel.get(j).val;
                    currentLevel.get(j).val = temp;
                    i++;
                    j--;
                }
            }
            level++;
        }
        return root;

    }
}
